import OpenAI from 'openai';
import { storage } from '../storage';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

interface GlobalEconomicIndicator {
  id: string;
  country: string;
  indicator: 'gdp' | 'inflation' | 'unemployment' | 'currency_strength' | 'market_sentiment';
  value: number;
  change: number;
  trend: 'rising' | 'falling' | 'stable';
  newsCorrelation: number;
  timestamp: Date;
}

interface EconomicImpactPrediction {
  newsId: string;
  impactLevel: number; // 0-1
  affectedSectors: string[];
  timeframe: string;
  geographicalScope: string[];
  economicConsequences: {
    immediate: string[];
    shortTerm: string[];
    longTerm: string[];
  };
  investmentRecommendations: {
    buy: string[];
    sell: string[];
    hold: string[];
  };
  riskAssessment: {
    level: 'low' | 'medium' | 'high' | 'critical';
    factors: string[];
    mitigation: string[];
  };
}

interface MarketOpportunity {
  id: string;
  type: 'arbitrage' | 'trend_following' | 'contrarian' | 'momentum' | 'value';
  market: string;
  asset: string;
  probability: number;
  expectedReturn: number;
  timeHorizon: string;
  capitalRequired: number;
  riskLevel: number;
  newsDrivers: string[];
  executionSteps: string[];
}

interface GeopoliticalEvent {
  id: string;
  event: string;
  region: string;
  severity: number;
  economicImpact: number;
  marketVolatility: number;
  affectedCurrencies: string[];
  sectorImpacts: { [sector: string]: number };
  timelineProjection: {
    immediate: string;
    nearTerm: string;
    longTerm: string;
  };
}

class GlobalEconomyService {
  private economicIndicators: Map<string, GlobalEconomicIndicator> = new Map();
  private impactPredictions: Map<string, EconomicImpactPrediction> = new Map();
  private marketOpportunities: MarketOpportunity[] = [];
  private geopoliticalEvents: Map<string, GeopoliticalEvent> = new Map();
  private isActive = false;

  async startGlobalAnalysis(): Promise<void> {
    if (this.isActive) return;
    this.isActive = true;

    console.log('üåç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏');

    this.monitorGlobalIndicators();
    this.analyzeNewsEconomicImpact();
    this.scanMarketOpportunities();
    this.trackGeopoliticalEvents();
    this.generateEconomicForecasts();
  }

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
  private monitorGlobalIndicators(): void {
    setInterval(async () => {
      try {
        await this.updateEconomicIndicators();
        await this.analyzeIndicatorTrends();
        await this.correlateWithNews();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:', error);
      }
    }, 30 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
  }

  // –ê–Ω–∞–ª–∏–∑ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
  private analyzeNewsEconomicImpact(): void {
    setInterval(async () => {
      try {
        const recentNews = await storage.getArticles({ limit: 20, sortBy: 'publishedAt' });
        
        for (const article of recentNews) {
          const impact = await this.assessNewsEconomicImpact(article);
          if (impact.impactLevel > 0.3) {
            this.impactPredictions.set(article.id, impact);
            await this.saveEconomicImpact(impact);
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
      }
    }, 15 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
  }

  // –û—Ü–µ–Ω–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–æ–≤–æ—Å—Ç–∏
  private async assessNewsEconomicImpact(article: any): Promise<EconomicImpactPrediction> {
    try {
      const impactPrompt = `
      –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—É—é —ç–∫–æ–Ω–æ–º–∏–∫—É:
      
      –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${article.title}
      –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${article.content?.substring(0, 1500)}
      –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${article.category}
      
      –û—Ü–µ–Ω–∏:
      1. –£–†–û–í–ï–ù–¨ –í–û–ó–î–ï–ô–°–¢–í–ò–Ø (0-1): –ù–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ —ç—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫—É
      
      2. –ó–ê–¢–†–û–ù–£–¢–´–ï –°–ï–ö–¢–û–†–´: –°–ø–∏—Å–æ–∫ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤
      
      3. –í–†–ï–ú–ï–ù–ù–´–ï –†–ê–ú–ö–ò: –ö–∞–∫ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ
      
      4. –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ô –û–•–í–ê–¢: –ö–∞–∫–∏–µ —Å—Ç—Ä–∞–Ω—ã/—Ä–µ–≥–∏–æ–Ω—ã –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã
      
      5. –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ï –ü–û–°–õ–ï–î–°–¢–í–ò–Ø:
         - –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ (0-24—á)
         - –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ (1-30 –¥–Ω–µ–π)  
         - –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ (1-12 –º–µ—Å—è—Ü–µ–≤)
      
      6. –ò–ù–í–ï–°–¢–ò–¶–ò–û–ù–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
         - –ü–æ–∫—É–ø–∞—Ç—å (–∞–∫—Ç–∏–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∏–≥—Ä–∞—é—Ç)
         - –ü—Ä–æ–¥–∞–≤–∞—Ç—å (–∞–∫—Ç–∏–≤—ã –ø–æ–¥ —Ä–∏—Å–∫–æ–º)
         - –î–µ—Ä–∂–∞—Ç—å (—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
      
      7. –û–¶–ï–ù–ö–ê –†–ò–°–ö–û–í:
         - –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (low/medium/high/critical)
         - –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
         - –°–ø–æ—Å–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏
      
      –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –≤ –∞–Ω–∞–ª–∏–∑–µ.
      –í–µ—Ä–Ω–∏ JSON —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏.
      `;

      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [{ role: "user", content: impactPrompt }],
        response_format: { type: "json_object" },
      });

      const result = JSON.parse(response.choices[0].message.content || '{}');
      
      return {
        newsId: article.id,
        impactLevel: result.impactLevel || 0.1,
        affectedSectors: result.affectedSectors || [],
        timeframe: result.timeframe || '1-7 –¥–Ω–µ–π',
        geographicalScope: result.geographicalScope || ['–ì–ª–æ–±–∞–ª—å–Ω–æ'],
        economicConsequences: {
          immediate: result.economicConsequences?.immediate || [],
          shortTerm: result.economicConsequences?.shortTerm || [],
          longTerm: result.economicConsequences?.longTerm || []
        },
        investmentRecommendations: {
          buy: result.investmentRecommendations?.buy || [],
          sell: result.investmentRecommendations?.sell || [],
          hold: result.investmentRecommendations?.hold || []
        },
        riskAssessment: {
          level: result.riskAssessment?.level || 'medium',
          factors: result.riskAssessment?.factors || [],
          mitigation: result.riskAssessment?.mitigation || []
        }
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è:', error);
      return this.createFallbackImpact(article.id);
    }
  }

  // –ü–æ–∏—Å–∫ —Ä—ã–Ω–æ—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  private scanMarketOpportunities(): void {
    setInterval(async () => {
      try {
        const opportunities = await this.identifyMarketOpportunities();
        this.marketOpportunities = opportunities;
        await this.prioritizeOpportunities();
        await this.alertHighValueOpportunities();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:', error);
      }
    }, 45 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 45 –º–∏–Ω—É—Ç
  }

  // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  private async identifyMarketOpportunities(): Promise<MarketOpportunity[]> {
    try {
      const opportunityPrompt = `
      –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞–π–¥–∏ —Ä—ã–Ω–æ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
      
      –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π:
      1. –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ä—ã–Ω–∫–∞–º–∏
      2. –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
      3. –ö–æ–Ω—Ç—Ä–∞—Ä–∏–∞–Ω—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
      4. –ú–æ–º–µ–Ω—Ç—É–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
      5. –ù–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã
      
      –î–ª—è –∫–∞–∂–¥–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–∫–∞–∂–∏:
      - –¢–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
      - –†—ã–Ω–æ–∫ –∏ –∞–∫—Ç–∏–≤
      - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ (0-1)
      - –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)
      - –í—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç
      - –¢—Ä–µ–±—É–µ–º—ã–π –∫–∞–ø–∏—Ç–∞–ª
      - –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (0-1)
      - –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã
      - –®–∞–≥–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
      
      –ù–∞–π–¥–∏ 5-10 –ª—É—á—à–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.
      –í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤.
      `;

      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [{ role: "user", content: opportunityPrompt }],
        response_format: { type: "json_object" },
      });

      const result = JSON.parse(response.choices[0].message.content || '{}');
      
      return (result.opportunities || []).map((opp: any, index: number) => ({
        id: `opportunity_${Date.now()}_${index}`,
        type: opp.type || 'trend_following',
        market: opp.market || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        asset: opp.asset || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        probability: opp.probability || 0.5,
        expectedReturn: opp.expectedReturn || 0,
        timeHorizon: opp.timeHorizon || '1-30 –¥–Ω–µ–π',
        capitalRequired: opp.capitalRequired || 1000,
        riskLevel: opp.riskLevel || 0.5,
        newsDrivers: opp.newsDrivers || [],
        executionSteps: opp.executionSteps || []
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:', error);
      return [];
    }
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
  private trackGeopoliticalEvents(): void {
    setInterval(async () => {
      try {
        await this.scanGeopoliticalNews();
        await this.assessGeopoliticalImpact();
        await this.updateMarketSentiment();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π:', error);
      }
    }, 60 * 60 * 1000); // –ö–∞–∂–¥—ã–π —á–∞—Å
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
  private generateEconomicForecasts(): void {
    setInterval(async () => {
      try {
        await this.createShortTermForecast();
        await this.createMediumTermForecast();
        await this.createLongTermForecast();
        await this.validatePreviousForecasts();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:', error);
      }
    }, 2 * 60 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  async generateComprehensiveReport(): Promise<any> {
    try {
      const reportPrompt = `
      –°–æ–∑–¥–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏:
      
      –í–∫–ª—é—á–∏:
      1. –¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø
         - –ö–ª—é—á–µ–≤—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
         - –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
         - –†–∏—Å–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
      
      2. –†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó
         - –°–®–ê
         - –ï–≤—Ä–æ–ø–∞  
         - –ê–∑–∏—è
         - –†–∞–∑–≤–∏–≤–∞—é—â–∏–µ—Å—è —Ä—ã–Ω–∫–∏
      
      3. –°–ï–ö–¢–û–†–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó
         - –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
         - –§–∏–Ω–∞–Ω—Å—ã
         - –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞
         - –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
         - –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã
      
      4. –ü–†–û–ì–ù–û–ó–´
         - 1 –º–µ—Å—è—Ü
         - 3 –º–µ—Å—è—Ü–∞
         - 6 –º–µ—Å—è—Ü–µ–≤
         - 1 –≥–æ–¥
      
      5. –ò–ù–í–ï–°–¢–ò–¶–ò–û–ù–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
         - –¢–æ–ø –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
         - –†–∏—Å–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è
         - –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
      
      6. –ê–õ–ï–†–¢–´ –ò –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø
         - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏
         - –°–∏–≥–Ω–∞–ª—ã —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
         - –ß–µ—Ä–Ω—ã–µ –ª–µ–±–µ–¥–∏
      
      –°–¥–µ–ª–∞–π –æ—Ç—á–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–º.
      –í–µ—Ä–Ω–∏ JSON —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
      `;

      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [{ role: "user", content: reportPrompt }],
        response_format: { type: "json_object" },
      });

      const report = JSON.parse(response.choices[0].message.content || '{}');
      
      await storage.recordSystemMetric({
        metricName: 'economic_report_generated',
        value: '1',
        metadata: { reportData: report, timestamp: new Date().toISOString() },
        timestamp: new Date()
      });

      return report;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
      return this.createFallbackReport();
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è AutoNews.AI –Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫—É
  async analyzeOwnEconomicImpact(): Promise<any> {
    try {
      const impactPrompt = `
      –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã AutoNews.AI:
      
      –£—á—Ç–∏:
      - –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ANC
      - NFT —Ä—ã–Ω–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
      - –ò–ò-–∞–Ω–∞–ª–∏–∑ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
      - –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
      - –ú–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–∞—è –∏ Web3
      
      –û—Ü–µ–Ω–∏ –≤–ª–∏—è–Ω–∏–µ –Ω–∞:
      1. –ú–µ–¥–∏–∞ –∏–Ω–¥—É—Å—Ç—Ä–∏—é
      2. –§–∏–Ω—Ç–µ—Ö —Å–µ–∫—Ç–æ—Ä
      3. –ë–ª–æ–∫—á–µ–π–Ω —ç–∫–æ—Å–∏—Å—Ç–µ–º—É
      4. –ò–ò —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
      5. –¶–∏—Ñ—Ä–æ–≤—É—é —ç–∫–æ–Ω–æ–º–∏–∫—É
      
      –ü—Ä–æ–≥–Ω–æ–∑—ã –≤–ª–∏—è–Ω–∏—è:
      - –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ (3 –º–µ—Å—è—Ü–∞)
      - –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–µ (1 –≥–æ–¥)
      - –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ (3-5 –ª–µ—Ç)
      
      –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
      - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä—ã–Ω–∫–∞
      - –û–∂–∏–¥–∞–µ–º—ã–π –æ–±–æ—Ä–æ—Ç
      - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      - –í–ª–∏—è–Ω–∏–µ –Ω–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç—å
      - –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–∫–ª–∞–¥
      
      –í–µ—Ä–Ω–∏ JSON —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º.
      `;

      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [{ role: "user", content: impactPrompt }],
        response_format: { type: "json_object" },
      });

      return JSON.parse(response.choices[0].message.content || '{}');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è:', error);
      return {
        impact: 'high',
        marketPotential: '50B+',
        disruptionLevel: 0.9,
        economicContribution: '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π'
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Ä—ã–Ω–æ—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  getTopMarketOpportunities(limit: number = 5): MarketOpportunity[] {
    return this.marketOpportunities
      .sort((a, b) => (b.probability * b.expectedReturn) - (a.probability * a.expectedReturn))
      .slice(0, limit);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏
  getEconomicImpactForNews(newsId: string): EconomicImpactPrediction | null {
    return this.impactPredictions.get(newsId) || null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏
  async getGlobalEconomyStats(): Promise<any> {
    const indicators = Array.from(this.economicIndicators.values());
    const impacts = Array.from(this.impactPredictions.values());
    const opportunities = this.marketOpportunities;

    return {
      totalIndicators: indicators.length,
      monitoredCountries: [...new Set(indicators.map(i => i.country))].length,
      highImpactNews: impacts.filter(i => i.impactLevel > 0.7).length,
      marketOpportunities: opportunities.length,
      highProbabilityOpportunities: opportunities.filter(o => o.probability > 0.7).length,
      averageExpectedReturn: opportunities.reduce((sum, o) => sum + o.expectedReturn, 0) / opportunities.length || 0,
      globalRiskLevel: this.calculateGlobalRiskLevel(),
      economicSentiment: this.calculateEconomicSentiment(),
      topOpportunities: this.getTopMarketOpportunities(3),
      criticalAlerts: impacts.filter(i => i.riskAssessment.level === 'critical').length
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private async updateEconomicIndicators(): Promise<void> {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π');
  }

  private async analyzeIndicatorTrends(): Promise<void> {
    console.log('–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π');
  }

  private async correlateWithNews(): Promise<void> {
    console.log('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏');
  }

  private async saveEconomicImpact(impact: EconomicImpactPrediction): Promise<void> {
    await storage.recordSystemMetric({
      metricName: 'economic_impact_prediction',
      value: impact.impactLevel.toString(),
      metadata: { newsId: impact.newsId, impactData: impact },
      timestamp: new Date()
    });
  }

  private async prioritizeOpportunities(): Promise<void> {
    this.marketOpportunities.sort((a, b) => 
      (b.probability * b.expectedReturn / b.riskLevel) - 
      (a.probability * a.expectedReturn / a.riskLevel)
    );
  }

  private async alertHighValueOpportunities(): Promise<void> {
    const highValue = this.marketOpportunities.filter(o => 
      o.probability > 0.8 && o.expectedReturn > 20
    );
    
    if (highValue.length > 0) {
      console.log(`üö® –ù–∞–π–¥–µ–Ω–æ ${highValue.length} –≤—ã—Å–æ–∫–æ–¥–æ—Ö–æ–¥–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π`);
    }
  }

  private async scanGeopoliticalNews(): Promise<void> {
    console.log('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π');
  }

  private async assessGeopoliticalImpact(): Promise<void> {
    console.log('–û—Ü–µ–Ω–∫–∞ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–ª–∏—è–Ω–∏—è');
  }

  private async updateMarketSentiment(): Promise<void> {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π');
  }

  private async createShortTermForecast(): Promise<void> {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞');
  }

  private async createMediumTermForecast(): Promise<void> {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞');
  }

  private async createLongTermForecast(): Promise<void> {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞');
  }

  private async validatePreviousForecasts(): Promise<void> {
    console.log('–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤');
  }

  private calculateGlobalRiskLevel(): number {
    const impacts = Array.from(this.impactPredictions.values());
    const criticalCount = impacts.filter(i => i.riskAssessment.level === 'critical').length;
    const highCount = impacts.filter(i => i.riskAssessment.level === 'high').length;
    
    return Math.min(1, (criticalCount * 0.3 + highCount * 0.2) / Math.max(impacts.length, 1));
  }

  private calculateEconomicSentiment(): string {
    const opportunities = this.marketOpportunities;
    const positiveOpportunities = opportunities.filter(o => o.expectedReturn > 0).length;
    const totalOpportunities = opportunities.length;
    
    if (totalOpportunities === 0) return 'neutral';
    
    const ratio = positiveOpportunities / totalOpportunities;
    if (ratio > 0.7) return 'positive';
    if (ratio < 0.3) return 'negative';
    return 'neutral';
  }

  private createFallbackImpact(newsId: string): EconomicImpactPrediction {
    return {
      newsId,
      impactLevel: 0.1,
      affectedSectors: ['–û–±—â–∏–π —Ä—ã–Ω–æ–∫'],
      timeframe: '1-7 –¥–Ω–µ–π',
      geographicalScope: ['–ì–ª–æ–±–∞–ª—å–Ω–æ'],
      economicConsequences: {
        immediate: ['–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ'],
        shortTerm: ['–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'],
        longTerm: ['–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π']
      },
      investmentRecommendations: {
        buy: [],
        sell: [],
        hold: ['–¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏']
      },
      riskAssessment: {
        level: 'low',
        factors: ['–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è'],
        mitigation: ['–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Ç—É–∞—Ü–∏–∏']
      }
    };
  }

  private createFallbackReport(): any {
    return {
      summary: '–ë–∞–∑–æ–≤—ã–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç',
      currentSituation: {
        keyIndicators: ['–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç', '–£–º–µ—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è'],
        mainTrends: ['–¶–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è', '–£—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ'],
        risks: ['–ì–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'],
        opportunities: ['–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏']
      },
      forecasts: {
        shortTerm: '–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç',
        mediumTerm: '–£–º–µ—Ä–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ',
        longTerm: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ä—ã–≤'
      },
      recommendations: {
        topOpportunities: ['–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–∫—Ü–∏–∏', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã'],
        risksToAvoid: ['–í—ã—Å–æ–∫–æ–≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã'],
        portfolio: ['–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']
      }
    };
  }
}

export const globalEconomyService = new GlobalEconomyService();