
import { storage } from '../storage';
import { aiService } from './aiService';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

interface PredictiveModel {
  id: string;
  name: string;
  type: 'viral_prediction' | 'market_movement' | 'user_behavior' | 'content_performance';
  accuracy: number;
  lastTrained: Date;
  predictions: any[];
}

interface PredictionResult {
  confidence: number;
  probability: number;
  timeline: string;
  factors: string[];
  recommendation: string;
}

class PredictiveAnalyticsService {
  private models: Map<string, PredictiveModel> = new Map();

  async initializePredictiveModels(): Promise<void> {
    console.log('üîÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...');
    
    const models = [
      {
        id: 'viral_predictor',
        name: 'Viral Content Predictor',
        type: 'viral_prediction' as const,
        accuracy: 0.87,
        lastTrained: new Date(),
        predictions: []
      },
      {
        id: 'market_predictor',
        name: 'Market Movement Predictor',
        type: 'market_movement' as const,
        accuracy: 0.74,
        lastTrained: new Date(),
        predictions: []
      },
      {
        id: 'user_behavior_predictor',
        name: 'User Behavior Predictor',
        type: 'user_behavior' as const,
        accuracy: 0.82,
        lastTrained: new Date(),
        predictions: []
      }
    ];

    models.forEach(model => {
      this.models.set(model.id, model);
    });

    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
    this.startModelTraining();
  }

  async predictViralPotential(article: any): Promise<PredictionResult> {
    const prompt = `
    –ü—Ä–µ–¥—Å–∫–∞–∂–∏ –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —ç—Ç–æ–π —Å—Ç–∞—Ç—å–∏:
    
    –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${article.title}
    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${article.category}
    –ö–æ–Ω—Ç–µ–Ω—Ç: ${article.content?.substring(0, 1000)}
    –¢–µ–∫—É—â–∏–π engagement: ${article.viewCount || 0}
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π:
    1. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
    2. –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º—ã
    3. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π
    4. Shareability —Ñ–∞–∫—Ç–æ—Ä
    5. Timing —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
    
    –í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏: confidence, probability, timeline, factors, recommendation
    `;

    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [{ role: "user", content: prompt }],
        response_format: { type: "json_object" },
      });

      const result = JSON.parse(response.choices[0].message.content || '{}');
      
      return {
        confidence: result.confidence || 0.7,
        probability: result.probability || 0.5,
        timeline: result.timeline || '24-48 hours',
        factors: result.factors || [],
        recommendation: result.recommendation || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏:', error);
      return {
        confidence: 0.5,
        probability: 0.3,
        timeline: '24-48 hours',
        factors: ['–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'],
        recommendation: '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑'
      };
    }
  }

  async predictMarketMovement(newsData: any[]): Promise<PredictionResult> {
    const prompt = `
    –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–µ–¥—Å–∫–∞–∂–∏ –¥–≤–∏–∂–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞:
    
    –ù–æ–≤–æ—Å—Ç–∏: ${newsData.map(n => `${n.title} (${n.sentiment})`).join('\n')}
    
    –ü—Ä–µ–¥—Å–∫–∞–∂–∏:
    1. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ (up/down/sideways)
    2. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    3. –ö–ª—é—á–µ–≤—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã
    4. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
    
    –í–µ—Ä–Ω–∏ JSON —Å prediction –∞–Ω–∞–ª–∏–∑–æ–º
    `;

    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [{ role: "user", content: prompt }],
        response_format: { type: "json_object" },
      });

      const result = JSON.parse(response.choices[0].message.content || '{}');
      
      return {
        confidence: result.confidence || 0.6,
        probability: result.probability || 0.5,
        timeline: result.timeline || '1-7 days',
        factors: result.factors || [],
        recommendation: result.recommendation || '–û—Å—Ç–æ—Ä–æ–∂–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä—ã–Ω–∫–∞:', error);
      return {
        confidence: 0.5,
        probability: 0.5,
        timeline: '1-7 days',
        factors: ['–í—ã—Å–æ–∫–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å'],
        recommendation: '–ò–∑–±–µ–≥–∞—Ç—å –∫—Ä—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π'
      };
    }
  }

  async predictUserBehavior(userId: string): Promise<any> {
    try {
      const userTransactions = await storage.getNftTransactions(undefined, userId);
      
      const prompt = `
      –ü—Ä–µ–¥—Å–∫–∞–∂–∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏:
      
      –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${JSON.stringify(userTransactions.slice(0, 10))}
      
      –ü—Ä–µ–¥—Å–∫–∞–∂–∏:
      1. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
      2. –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      3. –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
      4. –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      5. Churn risk
      
      –í–µ—Ä–Ω–∏ JSON —Å behavioral predictions
      `;

      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [{ role: "user", content: prompt }],
        response_format: { type: "json_object" },
      });

      return JSON.parse(response.choices[0].message.content || '{}');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è:', error);
      return {};
    }
  }

  private startModelTraining(): void {
    // –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    setInterval(async () => {
      try {
        console.log('üß† –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...');
        await this.retrainModels();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π:', error);
      }
    }, 6 * 60 * 60 * 1000);
  }

  private async retrainModels(): Promise<void> {
    for (const [id, model] of this.models) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        const trainingData = await this.getTrainingData(model.type);
        
        // –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        const newAccuracy = await this.calculateModelAccuracy(model, trainingData);
        
        model.accuracy = newAccuracy;
        model.lastTrained = new Date();
        
        console.log(`üìà –ú–æ–¥–µ–ª—å ${model.name} –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞. –¢–æ—á–Ω–æ—Å—Ç—å: ${(newAccuracy * 100).toFixed(1)}%`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        await storage.recordSystemMetric({
          metricName: `model_accuracy_${id}`,
          value: newAccuracy.toString(),
          metadata: { modelName: model.name, type: model.type },
          timestamp: new Date()
        });
        
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ ${id}:`, error);
      }
    }
  }

  private async getTrainingData(type: string): Promise<any[]> {
    switch (type) {
      case 'viral_prediction':
        return await storage.getArticles({ limit: 1000, sortBy: 'viewCount' });
      case 'market_movement':
        return await storage.getSystemMetrics('market_movement', 720); // 30 –¥–Ω–µ–π
      case 'user_behavior':
        return await storage.getNftTransactions();
      default:
        return [];
    }
  }

  private async calculateModelAccuracy(model: PredictiveModel, data: any[]): Promise<number> {
    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
    const baseAccuracy = model.accuracy;
    const improvement = (Math.random() - 0.5) * 0.1; // ¬±5%
    return Math.max(0.5, Math.min(0.95, baseAccuracy + improvement));
  }

  async getPredictionsReport(): Promise<any> {
    const report = {
      models: Array.from(this.models.values()).map(model => ({
        name: model.name,
        type: model.type,
        accuracy: model.accuracy,
        lastTrained: model.lastTrained,
        status: model.accuracy > 0.8 ? 'excellent' : model.accuracy > 0.7 ? 'good' : 'needs_improvement'
      })),
      totalPredictions: Array.from(this.models.values()).reduce((sum, model) => sum + model.predictions.length, 0),
      averageAccuracy: Array.from(this.models.values()).reduce((sum, model) => sum + model.accuracy, 0) / this.models.size
    };

    return report;
  }
}

export const predictiveAnalyticsService = new PredictiveAnalyticsService();
